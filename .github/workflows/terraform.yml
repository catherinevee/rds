name: Terraform Validation & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  TF_VERSION: "1.13.0"
  AWS_PROVIDER_VERSION: "6.2.0"
  TFLINT_VERSION: "v0.44.1"

jobs:
  validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Plan (Dry Run)
      run: |
        cd examples/basic
        terraform init
        terraform plan -var="password=test-password-123!" -var="create_security_group=true" -var="create_db_subnet_group=true" -var="skip_final_snapshot=true"

  lint:
    name: TFLint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}
        
    - name: TFLint Init
      run: tflint --init
      
    - name: TFLint
      run: tflint --format=compact

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        format: sarif
        out: tfsec.sarif
        working_directory: .
        
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: tfsec.sarif
        
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif

  test:
    name: Terraform Tests
    runs-on: ubuntu-latest
    needs: [validate, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Run Terraform Tests
      run: |
        terraform test
        terraform test test/

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README formatting
      run: |
        # Check if README.md exists and has required sections
        if [ ! -f "README.md" ]; then
          echo "❌ README.md is missing"
          exit 1
        fi
        
        # Check for required sections
        required_sections=("## Features" "## Prerequisites" "## Usage" "## Inputs" "## Outputs")
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "❌ Missing required section: $section"
            exit 1
          fi
        done
        
        echo "✅ README.md has all required sections"
        
    - name: Check examples
      run: |
        # Check if examples directory exists
        if [ ! -d "examples" ]; then
          echo "❌ Examples directory is missing"
          exit 1
        fi
        
        # Check for basic example
        if [ ! -d "examples/basic" ]; then
          echo "❌ Basic example is missing"
          exit 1
        fi
        
        # Check if basic example has main.tf
        if [ ! -f "examples/basic/main.tf" ]; then
          echo "❌ Basic example main.tf is missing"
          exit 1
        fi
        
        echo "✅ Examples directory structure is correct"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, lint, security, test, documentation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from git tags
      id: get_version
      run: |
        # Get the latest version tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        echo "version=${LATEST_TAG}" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false 